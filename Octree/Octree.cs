//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace OctreeDS
{


	//only supports static insertion
	[Serializable]
	public class Octree<T> where T : IAABBBoundedObject
    {
		public List<OctreeNode<T>> nodes = new List<OctreeNode<T>>();
		public OctreeNode<T> root;
		public float minDimensionOfNode = 1;

		public Octree (float minDimensionOfNode, AABB treeBounds)
		{
			root = new OctreeNode<T> (minDimensionOfNode, treeBounds);
			this.minDimensionOfNode = minDimensionOfNode;
			//this.anchor = anchor;
		}

		public bool Insert(T item, bool debugRender = false){
            //item.AABB.DrawAABB(Color.blue);

            return root.Insert (item, debugRender);
		}

		//recursively get all objects in tree
		public List<T> getAllContents(){
			Collection<T> items = new Collection<T> ();

			for (int i = 0; i<root.ObjectsInNode.Count; ++i) {
				items.Add(root.ObjectsInNode[i]);
			}

			for (int i = 0; i<root.Children.Count; ++i) {
				root.Children[i].getAllContents(ref items);
			}

			return items.ToList();
		}

		public void GetOverlappingItems(AABB itemAABB, out ICollection<T> items){

            items = new Collection<T>();

            root.Query (nodeBounds => nodeBounds.Overlaps(itemAABB), ref items);
        }

		public delegate bool RaycastTest(T item, Ray ray);

		/// <summary>
		/// Get all items that are intersected by the raycast
		/// </summary>
		/// <param name="ray">Ray for fetching items</param>
		/// <param name="rayCastTest">A callback to determine whether an item actually is intersected by the ray. The method only finds objects whose bounds intersect the ray, you must define how to raycast against the actual object</param>
		/// <param name="items">The items hit by the raycast</param>
		public void Raycast(Ray ray, RaycastTest rayCastTest, out ICollection<T> items)
		{
			items = new Collection<T>();

			root.Query(nodeBounds => nodeBounds.RayIntersects(ray), ref items);

			items = items.Where(t => rayCastTest(t, ray)).ToList();
		}

		public bool Remove(T item)
		{
			return root.Remove(item);
		}

		public bool EditItem(T item, Action<T> edit)
		{
			if (!Remove(item)) throw new InvalidOperationException("Item is not in the tree");
			edit(item);
			return Insert(item);
		}

		//public void GetOverlappingItems(Vector3 pos, out Collection<T> items)
		//{
		//    items = new Collection<T>();

		//    root.GetOverlappingItems(pos, ref items);
		//}
	}
}

