//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace OctreeDS
{


	//only supports static insertion
	[Serializable]
	public class Octree<T> where T : IAABBBoundedObject
    {
		public List<OctreeNode<T>> nodes = new List<OctreeNode<T>>();
		public OctreeNode<T> root;
		public float minDimensionOfNode = 1;

		public Octree (float minDimensionOfNode, AABB treeBounds)
		{
			root = new OctreeNode<T> (minDimensionOfNode, treeBounds);
			this.minDimensionOfNode = minDimensionOfNode;
			//this.anchor = anchor;
		}

		public bool Insert(T item, bool debugRender = false){
            //item.AABB.DrawAABB(Color.blue);

            return root.Insert (item, debugRender);
		}

		//recursively get all objects in tree
		public List<T> getAllContents(){
			Collection<T> items = new Collection<T> ();

			for (int i = 0; i<root.ObjectsInNode.Count; ++i) {
				items.Add(root.ObjectsInNode[i]);
			}

			for (int i = 0; i<root.Children.Count; ++i) {
				root.Children[i].getAllContents(ref items);
			}

			return items.ToList();
		}

		public void GetOverlappingItems(AABB itemAABB, out Collection<T> items){

            items = new Collection<T>();

            root.Query (nodeBounds => nodeBounds.Overlaps(itemAABB), ref items);
            //itemAABB.DrawAABB(Color.red);

        }

		public bool Remove(T item)
		{
			return root.Remove(item);
		}

		public bool EditItem(T item, Action<T> edit)
		{
			if (!Remove(item)) throw new InvalidOperationException("Item is not in the tree");
			edit(item);
			return Insert(item);
		}

		//public void GetOverlappingItems(Vector3 pos, out Collection<T> items)
		//{
		//    items = new Collection<T>();

		//    root.GetOverlappingItems(pos, ref items);
		//}
	}
}

